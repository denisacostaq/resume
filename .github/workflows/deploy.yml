# This is a basic workflow to help you get started with Actions

name: Deploy cv

# Controls when the action will run. 
on:
  push:
    tags:
    - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      working-directory: .

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Install packages
        run: |
          sudo apt clean
          sudo apt update
          sudo apt install -y pandoc context
#        working-directory: ${{env.working-directory}}

      # Configure the project to build
      - name: Configure project build
        shell: bash
        working-directory: ${{env.working-directory}}
        run: |
          mkdir build
          pushd build
          cmake ..

      # Runs a single command using the runners shell
      - name: Build docs
        shell: bash
        working-directory: ${{env.working-directory}}/build
        run: make pdf doc txt html

      - name: Cache
        uses: actions/cache@v3.3.2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: build
          # An explicit key for restoring and saving the cache
          key: build-output-${{ hashFiles('.github/workflows/deploy.yml', './CMakeLists.txt', './src/**') }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      working-directory: .
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
    
      - name: Cache
        uses: actions/cache@v3.3.2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: build
          # An explicit key for restoring and saving the cache
          key: build-output-${{ hashFiles('.github/workflows/deploy.yml', './CMakeLists.txt', './src/**') }}

      - name: Extract tag name
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Create Draft Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: ${{ github.event.head_commit.message }}
          draft: true
          prerelease: false

      - name: Upload pdf
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/resume.pdf
          asset_name: resume.pdf
          asset_content_type: application/pdf

      - name: Upload txt
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/resume.txt
          asset_name: resume.txt
          asset_content_type: text/plain

      - name: Upload doc
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/resume.docx
          asset_name: resume.docx
          asset_content_type: application/msword

      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}

      - name: Deploy html version
        uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          single-commit: true
          branch: gh-pages # The branch the action should deploy to.
          folder: build/www # The folder the action should deploy.
